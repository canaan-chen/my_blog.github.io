{"categories":[{"title":"Windows美化","uri":"http://unclefish.ink/my_blog.github.io/categories/windows%E7%BE%8E%E5%8C%96.html"},{"title":"一个IC工程师的自我修养","uri":"http://unclefish.ink/my_blog.github.io/categories/%E4%B8%80%E4%B8%AAic%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB.html"},{"title":"博客建站tips","uri":"http://unclefish.ink/my_blog.github.io/categories/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99tips.html"},{"title":"影评文章","uri":"http://unclefish.ink/my_blog.github.io/categories/%E5%BD%B1%E8%AF%84%E6%96%87%E7%AB%A0.html"},{"title":"留学这件小事","uri":"http://unclefish.ink/my_blog.github.io/categories/%E7%95%99%E5%AD%A6%E8%BF%99%E4%BB%B6%E5%B0%8F%E4%BA%8B.html"},{"title":"鱼叔的视界","uri":"http://unclefish.ink/my_blog.github.io/categories/%E9%B1%BC%E5%8F%94%E7%9A%84%E8%A7%86%E7%95%8C.html"}],"posts":[{"content":"大家好，我是鱼叔，今天在这里聊一下如何在windows上体验极致模仿的Mac os 系统桌面。其实很多人都有这样的疑问，既然欣赏Mac os系统，那为什么要买pc呢，与其在pc上捣鼓让它变得像mac，还不如直接买一台macbook。当然，在经济条件允许的条件下，最香的方法就是直接买一个mac，本文适用于那些想在pc端体验Mac os桌面的用户，以及那些习惯mac系统但是因为现实条件使用pc的用户。\n先上效果图：\n工具介绍  工具：Mydock Myfinder\n 本文所使用的工具是 Mydock 和 Myfinder。 不同于大家熟悉的rocketdock，这个软件的安装更加快捷方便，直接在官网中下载，然后解压运行exe文件即可（注意事项：最好用edge 浏览器下载，chrome会把文件视为病毒而拒绝下载）。\nMydock 在下载完成后，点击运行dock.exe，你就会发现桌面已经出现了类似mac os系统的dock。\n在dock上添加相关的应用和文件 初始化的dock上只有finder、Launchpad和废纸篓，为了丰富应用，Mydock 提供了两种添加的方式：\n 直接将桌面上的应用icon拖到dock上； 打开你想要的添加的软件，这时候dock上会显示出那个软件的图标，然后右击图标选择“在Dock中保留”。  添加文件或者文件夹也是相同的方法。\nLaunchpad 的设置 我在Launchpad中体会到了官网所说的“极致模仿”，当我打开这个Launchpad的时候，显示图是这样的:\n这不就是mac os 吗？看到这个效果图的时候，我是惊呆的。当然这和真实mac下的Launchpad还是不一样，里面的软件不是自动生成的，用户需要手动添加自己应用，只需要右键Launchpad，点击“添加图标” ，将所用放的软件拖进去即可。\n不要以为这样就结束了，开发者还给Launchpad提供了一个设置选项，右键dock选择“dock偏好设置”，在其他选项中，有一个“使用开始菜单代替Launchpad”的选项，当你勾选这个选项时，你就会发现点击Launchpad，桌面会弹出windows的开始菜单，这简直是非常考虑pc用户的使用习惯了。\n请输入图片标题\n提供个性化的logo更替功能 不满意软件自带的logo，或者想要自己弄一个统一风格的dock？Mydock为想要个性化的用户提供了自定义logo的功能，只需要右键相应dock上的软件，点击“设置此图标”，将你想用的logo png 文件拖到指定地方即可。\n消息提醒方式 Mydock 让消息提醒以方块的形式从右边弹出，很好地模拟了Mac os 消息提醒的方式。但是因为软件没法读取微信等通信工具中具体的消息数量，因此在dock中的消息数量不是很精确。\n图片来自官网\n相关的设置 为了更加贴近Mac os系统，dock 在偏好设置中提供了很多设置，由于功能较多，就不全部细讲，我会挑几个我觉得比较实用的功能来进行介绍。\n 通用选项里主要用于设置Dock 上的图标大小，以及图标间距和dock所处位置。 高级选项中主要为使用时的习惯设置，包括动画效果，以及渲染效果等。推荐其中勾选“开机自启动”和“自动隐藏任务栏”选项。  其他选项中值得关注的设置是“开始菜单代替Launchpad” 以及 “全局模糊效果”。  Myfinder Myfinder的安装和Mydock 相似，直接运行exe文件即可，随后就会发现自己的桌面上方出现了类似Mac os的finder栏。Myfinder 提供了对电脑信息的实时监控，包括CPU、硬盘空间、内存占有量等，同时还支持显示托盘（再也不用担心windows任务栏消失后，找不到在后台运行的软件了）。\nMyfinder 还有一个很有趣的设计，它保留了一个Siri标志，用鼠标点击后会弹出windows的Cortana语音助手，另外Myfinder上的搜索功能会自动将输入的内容用于百度搜索，和实际的Mac os 操作还是有区别的。\n使用体验总结 Mydock 和 Myfinder 带给我整体的使用体验是很惊艳的，没有复杂的操作设置，简单的下载和安装就能带来极其逼真的Mac os桌面模拟体验。除此之外，它的很多细节设计大大地提高了用户体验，有一种Windows和Mac os的融合感。最后，不得不说的还是它的极致模拟带给用户沉浸式的体验，将Mac os的桌面基本原封不动地给搬到了pc上。当然，这款软件还是有一些问题，比如会占用一定的内存，以及有时候会莫名其妙地奔溃，不过相信这款软件会不断地被优化。\n","id":0,"section":"posts","summary":"\u003cp\u003e\u003cimg src=\"https://cdn.sspai.com/2020/04/06/31487db0bb60db90a4640f623c417063.jpg?imageMogr2/quality/95/thumbnail/!1420x708r/gravity/Center/crop/1420x708/interlace/1\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e大家好，我是鱼叔，今天在这里聊一下如何在windows上体验极致模仿的Mac os 系统桌面。其实很多人都有这样的疑问，既然欣赏Mac os系统，那为什么要买pc呢，与其在pc上捣鼓让它变得像mac，还不如直接买一台macbook。当然，在经济条件允许的条件下，最香的方法就是直接买一个mac，本文适用于那些想在pc端体验Mac os桌面的用户，以及那些习惯mac系统但是因为现实条件使用pc的用户。\u003c/p\u003e","tags":["mydock"],"title":"如何在windows 体验极致模仿Mac os系统桌面","uri":"http://unclefish.ink/my_blog.github.io/2020/04/%E5%A6%82%E4%BD%95%E5%9C%A8windows-%E4%BD%93%E9%AA%8C%E6%9E%81%E8%87%B4%E6%A8%A1%E4%BB%BFmac-os%E7%B3%BB%E7%BB%9F%E6%A1%8C%E9%9D%A2.html","year":"2020"},{"content":"本文讲述了四个next优化方案：文章置顶、添加博客背景、调整文章内容透明度、增加近期文章list。\n1. 如何让文章置顶 博文置顶 在gitbash里输入以下代码加入置顶插件。\n$ npm uninstall hexo-generator-index --save $ npm install hexo-generator-index-pin-top --save  然后在文章的Front-matter中加上top:true即可实现置顶。\n置顶标志体现 实现置顶后如果没有置顶标志就会表现得很奇怪，这时候我们需要添加相关的置顶标志来实现。\n打开/blog/theme/next/layout/_macro 中的post.swig 文件，定位到 \u0026lt;div class=\u0026quot;post-block\u0026quot;\u0026gt;下，添加如下代码：\n{% if post.top %} \u0026lt;i class=\u0026quot;fa fa-thumb-tack\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;font color=7D26CD\u0026gt;置顶\u0026lt;/font\u0026gt; \u0026lt;span class=\u0026quot;post-meta-divider\u0026quot;\u0026gt;|\u0026lt;/span\u0026gt; {% endif %}  2. 增加博客背景图片  在themes/next/source/css/_custom/custom.styl中添加CSS样式  文件位置：hexo/themes/next/source/css/_custom/custom.styl// 背景图片\nbody::before { background-image: url(https://背景图.jpg); background-repeat: no-repeat; background-size: cover; background-position: 50% 50%; content: \u0026quot; \u0026quot;; position: fixed; width: 100%; height: 100%; top: 0; left: 0; z-index: -2; }  2）jquery-backstretch插件\n文件位置：hexo/themes/next/layout/_layout.swig\n\u0026lt;script src=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/jquery-backstretch/2.0.4/jquery.backstretch.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; + \u0026lt;script\u0026gt; + $(\u0026quot;body\u0026quot;).backstretch(\u0026quot;https://背景图.jpg\u0026quot;); + \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt;  加入到文件最后面前面即可。\n3. 博客内容透明度调整 NexT主题的博客文章均是不透明的，下面的方法可以使博客内容透明化：\n在blog/themes/next/source/css/_custom/custom.styl中添加以下内容：\n// page-opacity .content-wrap { opacity: 0.85; } .sidebar { opacity: 0.85; } .header-inner { background: rgba(255,255,255,0.85); } .popup { opacity: 0.9; }  其中content-wrap是文章内容的透明度设置，sidebar是侧边框的透明度设置，header-inner是菜单栏的透明度设置，popup是搜索框（local-search）的透明度设置。\n可以修改上面的数字来自定义透明度。\n注意其中header-inner不能使用opacity进行配置。 因为header-inner包含header.swig中的所有内容。 若使用opacity进行配置，子结点会出很多问题\n4. 增加近期文章list {% if theme.recent_posts %} \u0026lt;div class=\u0026quot;links-of-blogroll motion-element {{ \u0026quot;links-of-blogroll-\u0026quot; + theme.recent_posts_layout }}\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;links-of-blogroll-title\u0026quot;\u0026gt; \u0026lt;!-- modify icon to fire by szw --\u0026gt; \u0026lt;i class=\u0026quot;fa fa-history fa-{{ theme.recent_posts_icon | lower }}\u0026quot; aria-hidden=\u0026quot;true\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; {{ theme.recent_posts_title }} \u0026lt;/div\u0026gt; \u0026lt;ul class=\u0026quot;links-of-blogroll-list\u0026quot;\u0026gt; {% set posts = site.posts.sort('-date') %} {% for post in posts.slice('0', '5') %} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ url_for(post.path) }}\u0026quot; title=\u0026quot;{{ post.title }}\u0026quot; target=\u0026quot;_blank\u0026quot;\u0026gt;{{ post.title }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {% endfor %} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; {% endif %}  将此代码贴在next/layout/_macro/sidebar.swig中的if theme.links对应的endif后面，就ok了，是不是很简单。。。。 为了配置方便，在主题的_config.yml中添加了几个变量，如下：\nrecent_posts_title: 近期文章 recent_posts_layout: block recent_posts: true ","id":1,"section":"posts","summary":"\u003cp\u003e\u003cimg src=\"https://cdn.sspai.com/2020/03/19/dcc16be00b1827f820c01bfe47c4d29d.jpg?imageMogr2/quality/95/thumbnail/!1420x708r/gravity/Center/crop/1420x708/interlace/1\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e本文讲述了四个next优化方案：文章置顶、添加博客背景、调整文章内容透明度、增加近期文章list。\u003c/p\u003e","tags":["hexo"],"title":"hexo Next 主题修改tips","uri":"http://unclefish.ink/my_blog.github.io/2020/04/hexo-next-%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9tips.html","year":"2020"},{"content":"「hello 大家好，我是鱼叔。在上一篇讲完关于next的优化tips之后，这一篇我们来聊一下CODING平台的代码托管以及如何个性化你自己的域名」\n初衷 一般大家的hexo博客都是基于GIthub 进行托管，但是这个托管存在一个问题就是国内网络访问会比较慢，同时GitHub对百度搜索的爬虫存在限制，也就是说你的博客如果基于Github可能就没法被百度搜索给收录，这时候咱们就需要另一个代码托管平台来应对国内的网络访问。笔者所采用的平台是CODING,有点类似Github的一个国内代码托管平台。\n关于域名，纯粹是个人的喜好问题了。为了让自己的博客更加个性化，一个独特的域名自然是很有必要的，再加上国内购买域名的方式很方便（笔者便通过阿里云购买了域名），所以有兴趣的博主也可以考虑。\nCODING 平台代码托管 CODING 的注册 CODING 作为一个国内代码托管平台，同时支持git操作。首先在coding.net 进行注册。\n将ssh 公钥配置到CODING上 一般之前用GitHub部署博客时已经生成了ssh密钥，如果没有生成则从第一步开始，如果已经生成了则从第二步开始。\n  生成ssh密钥\n打开gitbash，输入 ssh-keygen -t rsa -b 4096 -C \u0026quot;your_email@example.com\u0026quot; ，然后一直回车（建议用同样的邮箱注册CODING 和 GitHub）。\n  复制公钥\n打开C盘下user 文件夹中的.ssh文件夹，再打开其中的id_rsa.pub，将其中的公钥进行复制。\n打开CODING个人设置，点击左侧的SSH公钥，选择添加新的公钥，将之前复制的所有内容进行粘贴即可。\n  公钥配置测试\n为了测试公钥添加是否完成，我们需要在本地的GitBash里进行测试。打开GitBash，输入\nssh -T git@e.coding.net  然后会询问是否继续，一直输入yes即可，最后会显示success的标志。\n  创建CODING 仓库 在自己的项目管理平台上新建一个代码托管项目。\n在创建完项目后，会在右侧看到相关的HTTP协议的链接，将它进行复制用于后面的代码上传。\n部署博客   在我们的blog文件夹中打开_config.yml文件，在deploy下面添加CODING平台的链接(链接为上一步复制的链接)，注意后方逗号后的master是分支的命名格式。\ndeploy: type: git repo: github: https://github.com/xxx/xxx.github.io.git,master coding: https://e.coding.net/xxx/xxx.git,master    在source文件中新建一个Staticfile（用于生成静态网页），注意大小写以及没有后缀的特点。可以通过gitbash输入以下代码来生成，也可通过新建一个txt文件然后修改名字来实现。\ncd source touch Staticfile    在Git Bash中输入hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo d 来进行部署。\n  生成静态网页 刚生成的项目仓库中是不存在生成静态网页的选项的，因此我们要将这个按钮打开。打开方式也很简单，点击项目栏下方的“项目设置”，选择“通知设置”，将其中的“构建与部属”打开，然后就可以发现项目栏中会出现“构建静态网页\u0026quot;选项，通过这个选项便可以生成我们所需的博客了，并且CODING平台会提供相应的网站链接（注意，静态网页生成需要实名注册）。\n域名个性化 域名就是一个网站的名字，通过网域名称系统（DNS）来实现对具体IP地址的访问。为了保证域名的唯一性，所有的域名都需要通过域名注册商实现注册，笔者便是通过阿里云实现注册，接下去的教程也是基于阿里云。\n购买域名   在阿里云万网上查询想要的域名。\n  将域名加入清单并结算。\n  创建信息模板。（注意信息模板中要求实名认证，并且推荐使用身份证，会比较快捷，笔者曾用护照去实名花费了大量的审核时间）\n  付钱。\n  解析 当购买完域名后，需要在域名的控制平台里加入我们想要这个域名映射到的实际网站。点击“解析”操作进入域名控制台。\n在域名控制台中加入解析记录，主要填的内容为记录类型、主机记录、解析线路、记录值。具体填写如下：\n记录类型\t主机记录\t解析线路\t记录值 CNAME\twww\t境外\tgithub 博客的网址 CNAME\twww\t默认 前面CODING平台产生的静态网页的网址 A @ 默认 185.199.108.153 A @ 默认 185.199.109.153 A @ 默认 185.199.110.153 A @ 默认 185.199.111.153  其中将GitHub部署的博客和CODING部署的博客分别解析线路改成境外和境内，是为了让境外用户和境内用户能更加快捷的访问你的博客而不受地域限制。\n注意，针对CODING 平台还需要加一个A记录类型的记录，记录值为CODING Page 的IP。CODING Page 的IP 可通过在gitbash中输入ping 你的名字.coding.me 来获得。\n购买免费的SSL证书 阿里云为个人的域名提供免费的SSL证书，具体方法如下：\n  打开个人控制台选择配置SSL证书\n  然后在购买证书中选择免费版（个人）DV 即可。\n  GitHub本地配置   新建CNAME文件\n进入自己博客的source文件夹中，新建一个CNAME文件，注意没有后缀。然后打开该文件，在文件中加入自己的域名，注意不需要加http或者www，比如笔者的博客为unclefish.ink，直接输入unclefish.ink 保存即可。\n  部署\n在GitBash 中输入 hexo g、hexo d进行部署，然后打开自己GitHub博客仓库，打开设置查看GitHub Pages 中的Custom domain 是否是自己的博客新域名。\n  CODING 部署新域名 在CODING平台的静态网页部署中选择设置，然后在自定义域名中加了自己的域名后保存即可（注意要求要在阿里云的DNS中先加入CNAME 导向CODING的静态网页）。\n修改完域名后，网站的浏览数会重新开始计数，所以算是一种弊端吧。\n将博客重新收录到谷歌和百度中 谷歌收录 由于换了域名，所以需要重新加入收录库，在控制台中增加收录网页，然后在验证中选择dns验证，这时候谷歌会提供一个TXT，将这个TXT复制到阿里云的DNS解析记录中，通过验证后即可被收录到谷歌中（注意验证后要提交站点网页）。新增记录格式如下：\n记录类型\t主机记录\t解析线路\t记录值 TXT\t@\t默认\tgoogle-xxx(复制来的值)  百度收录 DNS 验证 因为GitHub不允许百度的爬虫，所以这里我们通过将百度的搜索导向我们在CODING平台上建立的静态网页。\n  在百度的站点网站中添加自己的博客。\n  选择CNAME验证方式，这时候百度会要求将xxxxx.你的博客使用CNAME解析到ziyuan.baidu.com, 这时候我们要将前面的xxxx给复制下来。\n  打开阿里云DNS解析工具，新增如下记录，注意xxxx为之前复制的值。\n记录类型\t主机记录\t解析线路\t记录值 CNAME\txxxx\t默认\tziyuan.baidu.com    在百度站点平台点击验证即可。\n  提交站点文件 在gitbash中输入 npm install hexo-generator-baidu-sitemap --save 来加载插件，然后在博客的_config.yml 文件中添加以下代码。\nbaidusitemap: path: baidusitemap.xml  最后通过hexo g; hexo d 实现部署，会发现在public文件夹中多了一个baidusitemap.xml 文件，这就是百度所要抓取的站点文件。随后在百度链接提交处选择sitemap输入自己的文件路径即可。\n","id":2,"section":"posts","summary":"\u003cp\u003e\u003cimg src=\"https://cdn.sspai.com/2020/03/30/3a7e7aec64856772c43f0efe5ea2d1b3.jpg?imageMogr2/quality/95/thumbnail/!1420x708r/gravity/Center/crop/1420x708/interlace/1\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e「hello 大家好，我是鱼叔。在上一篇讲完关于next的优化tips之后，这一篇我们来聊一下CODING平台的代码托管以及如何个性化你自己的域名」\u003c/p\u003e","tags":["hexo"],"title":"hexo 博客拓展 | CODING平台托管以及个性化域名","uri":"http://unclefish.ink/my_blog.github.io/2020/03/hexo-%E5%8D%9A%E5%AE%A2%E6%8B%93%E5%B1%95.html","year":"2020"},{"content":"本章节讲述APB regesiter 模块。register 处于biu和byte_ctrl 之间，它的作用在于收取到来自biu模块的读写信号进行读写操作，之后转换成相应的控制信号对后面模块进行控制，同时byte_ctrl 和bit_ctrl 会产生相应的状态信号反馈给reg模块。\n1. Register 分类 首先我们先对这次设计的寄存器进行一次分类。\n  预分频寄存器： 用于存储分频的具体参数。\n  控制寄存器： 用于使能和中断\n  数据接收寄存器：用于接受数据\n  数据发送寄存器：用于传输数据\n  状态寄存器：存储着系统模块的状态，包括应答信号接受状态、数据传输状态等\n  命令寄存器：包含着一系列的指令。\n  2. 整体模块的输入输出口 首先我们定义一下整个master的reg的输入输出。\n输入信号：\n 来自biu：wr_en, rd_en, byte_en, reg_addr, ipwdata。 来自byte_ctrl: done(一帧完成信号) i2c_al(仲裁失败信号)、rxack（应答信号）、i2c_busy（busy 标志位）、tip(传输状态信号)、rxr_i(输入数据)  输出信号：\n 发送给biu ：iprdata(读出数据，传输给apb） 发送给byte_ctrl：core_en(片选信号)、ien_en(中断功能使能信号)、prer(分频数预设置，传输给byte_ctrl)、txr(存储来自apb的数据，并且用于传输给下一级)、sta（启动标志位）、sto（停止标志位）、rd（读信号）、wr（写信号）、ack（响应信号）、irq_flag_d(中断标志位)  module ahb_i2c_reg #( parameter ADDR_SLICE_LHS = 5, // 5位输入地址 parameter APB_DATA_WIDTH = 32 // 32 位数据宽度 ) ( input pclk, input\tprestn, // biu 模块连接信号 input\twr_en, // 来自biu的写信号 input\trd_en, // 来自biu的读信号 input\t[3:0]\tbyte_en, input\t[ADDR_SLICE_LHS-3:0]\treg_addr,// 3位地址 input\t[APB_DATA_WIDTH-1:0]\tipwdata, //来自biu的写数据 output\treg [15:0]\tiprdata, //输出给biu的读数据 input\tdone, input\ti2c_al, //仲裁失败信号 input\trxack, //应答信号 input\ti2c_busy, //busy 标志位 input\ttip, input\t[7:0]\trxr_i, // 输出控制信号，全都时reg形式，表示控制信号都来自D触发器 output\treg\t[15:0]\tprer, output\treg\tcorn_en, output\treg\tien_en, output\treg\t[7:0]\ttxr, output\treg\tsta, output\treg\tsto, output\treg\trd, output\treg\twr, output\treg\tack, output\treg\tirq_flag_d );  3.寄存器地址的分配 3.1 寄存器地址分配 因为APB原地址分配方式为00h, 04h, 08h, 0Ch, 10h和14h， 这种八位的地址通过biu，只取低三位的方式已经转换为3位的地址addr，通过下面的代码实现对对应寄存器的选取。\nassign i2c_cpr_en = (reg_addr == 3'h0) ? 1'b1 : 1'b0; //预分频寄存器 assign i2c_ctr_en = (reg_addr == 3'h1) ? 1'b1 : 1'b0; // 控制寄存器 assign i2c_rdr_en = (reg_addr == 3'h2) ? 1'b1 :\t1'b0; //接受寄存器 assign i2c_sr_en = (reg_addr == 3'h3) ? 1'b1 : 1'b0; //状态寄存器 assign i2c_tdr_en = (reg_addr == 3'h4) ? 1'b1 : 1'b0; //发送数据寄存器 assign i2c_cr_en = (reg_addr == 3'h5) ? 1'b1 : 1'b0; //命令寄存器  3.2 Biu 读写信号转换 将biu 的读写信号转换为寄存器的读写信号。其中i2c_sr_rd， 是状态寄存器的读信号转换，因为该寄存器只能在读的时候清状态，写的时候不可以清除状态。\nassign i2c_cpr_wr = i2c_cpr_en \u0026amp; wr_en; assign i2c_ctr_wr =\ti2c_ctr_en \u0026amp; wr_en; assign i2c_rdr_wr = i2c_rdr_en \u0026amp; wr_en; assign i2c_sr_wr = i2c_sr_en \u0026amp; wr_en; assign i2c_tdr_wr = i2c_tdr_en \u0026amp; wr_en; assign i2c_cr_wr = i2c_cr_en \u0026amp; wr_en; assign i2c_sr_rd = i2c_sr_en \u0026amp; rd_en;// 读操作信号  4. 预分频寄存器的设计 预分频寄存器须在该寄存器的写信号i2c_cpr_wr为高时，并且片选信号为低时进行赋值，这是因为预分频必须在接口运作前先完成设定，设定方式为将输入数据ipwdata进行赋值。同时prer保存在i2c_cpr_reg 中。\nalways @ (posedge pclk or negedge prestn) begin if (!prestn) begin prer \u0026lt;= 16'h0000; end else begin prer \u0026lt;= prer_pre; end end assign prer_pre = i2c_cpr_wr \u0026amp; ~core_en ? ipwdata[15:0] : prer; //如果写操作地址选中，并且未使能时，则将APB 上的数据写入。 // 设定core_en的目的是，当模块未使能时，要求设定好预分频寄存器，若使能后，则预分频寄存器不能改变。 assign i2c_cpr_reg = {prer};  5. 控制寄存器 控制寄存器提供两个信号，一个是片选使能信号，另一个是中断使能信号，而这两个信号通过ipwdata的第八位和第七位来实现，即ipwdata[7],ipwdata[6]。\nalways @ (posedge pclk or negedge prestn) begin if (!prestn) begin core_en \u0026lt;= 1'b0; ien_en\t\u0026lt;= 1'b0; end else begin core_en \u0026lt;= core_en_pre; ien_en\t\u0026lt;= ien_en_pre; end end assign core_en_pre = i2c_ctr_wr ? ipwdata[7] : core_en; // 第七位来赋值 assign ien_en_pre = i2c_ctr_wr ? ipwdata[6] : ien_en; assign i2c_ctr_reg = {core_en,ien_en,6'b0};  6. 发送寄存器 发送寄存器会将收到的ipwdata数据保存发送给下一级，因为传输过程中实际只用到八位传播，所以最后txr中存储的仅为ipwdata中的低八位。\nalways @ (posedge pclk or negedge prestn) begin // txr 数据发送寄存器 if(!prestn) begin txr \u0026lt;= 8'b0; end else begin txr \u0026lt;= txr_pre; end end assign txr_pre = i2c_tdr_wr ? ipwdata[7:0] : txr; //是否要输入16位数据？ assign i2c_tdr_reg = {8'b0, txr};  7. 接收寄存器 接受寄存器功能和发送寄存器类似，负责存储读取到的数据rxr_i。其中done信号表示一帧信号已经完成传输，当done信号为高时，才可以进行数据存储。\nalways @ ( posedge pclk or negedge prestn) begin if (!prestn) begin rxr \u0026lt;= 8'b0; end else begin rxr \u0026lt;= rxr_pre; end end assign rxr_pre = done ? rxr_i : rxr; //将byte control模块读取到的数据输入，用于给apb模块读取 assign i2c_rdr_reg = {8'h0,rxr};  8. 控制寄存器 控制寄存器中含有较多的输出控制信号：sta（启动标志位）、sto（停止标志位）、rd（读信号）、wr（写信号）、ack（响应信号）。\n当done信号传过来时，表示一帧数据发送完毕，控制信号都清零，这时候如果要赋值进行控制，则统一根据输入的ipwdata[7:4]来进行（选7到4是因为spec规定的，个人设计可以进行修改），iack 信号作为备用。\nalways @ (posedge pclk or negedge prestn) begin if (!prestn) begin sta \u0026lt;= 1'b0; sto\t\u0026lt;= 1'b0; rd\t\u0026lt;= 1'b0; wr\t\u0026lt;= 1'b0; ack\t\u0026lt;= 1'b0; iack \u0026lt;= 1'b0; end else begin sta \u0026lt;= sta_pre; sto\t\u0026lt;= sto_pre; rd\t\u0026lt;= rd_pre; wr\t\u0026lt;= wr_pre; ack\t\u0026lt;= ack_pre; iack \u0026lt;= iack_pre; end end assign sta_pre = done ? 1'b0 : i2c_cr_wr \u0026amp; ien_en ? ipwdata[7] : sta ; //如果done信号穿过来，表示已经完成，则start标志清零。实现物理清零操作 assign sto_pre = done ? 1'b0 : i2c_cr_wr \u0026amp; ien_en ? ipwdata[6] : sto ; assign rd_pre = done ? 1'b0 : i2c_cr_wr \u0026amp; ien_en ? ipwdata[5] : rd ; assign wr_pre = done ? 1'b0 : i2c_cr_wr \u0026amp; ien_en ? ipwdata[4] : wr ; assign ack_pre = i2c_cr_wr ? ipwdata[3] : 1'b0; assign iack_pre = i2c_cr_wr ? ipwdata [0] : 1'b0;  9. 状态寄存器 状态寄存器用于接收状态信息，该状态寄存器只允许读而不可以写。总共这几个状态：done(一帧完成信号) i2c_al(仲裁失败信号)、rxack（应答信号）、i2c_busy（busy 标志位），以及发出中断状态irq_flag_d。\n其中中断状态，如果对该寄存器进行读操作时，会将中断寄存器清零，不会实现中断。相应的，中断发生条件为中断flag 为1 并且中断信号使能为1。\nalways @ (posedge pclk or negedge prestn) begin if (!prestn) begin rxack_d\t\u0026lt;= 1'b0; i2c_busy_d\t\u0026lt;= 1'b0; al_d\t\u0026lt;= 1'b0; tip_d\t\u0026lt;= 1'b0; irq_flag_d\t\u0026lt;= 1'b0; end else begin rxack_d \u0026lt;= rxack; i2c_busy_d\t\u0026lt;=\ti2c_busy; al_d\t\u0026lt;= i2c_al | (al_d \u0026amp; ~sta); // i2c_al 是仲裁失败信号 tip_d\t\u0026lt;= (wr | rd);\tirq_flag_d \u0026lt;= irq_flag_pre; end end assign irq_flag_pre = i2c_sr_rd ? 1'b0 : irq_flag \u0026amp; ien_en ? 1'b1 : irq_flag_d ; // 读的时候会把flag 给清掉 assign i2c_cr_reg = {8'b0 ,rack_d ,i2c_busy_d ,al_d ,tip_d ,irq_flag_d }; assign irq_flag = (done | i2c_al); //当完成一帧数据的传输或者发生总裁错位的时候产生中断标志位。  10. 检测寄存器情况 为了方便检测寄存器里的数据情况，通过以下的组合逻辑，在选中地址之后对访问的寄存器的数据进行存储。\nalways @ (*) begin iprdata = {32{1'b0}}; if (i2c_cpr_en == 1'b1) iprdata [15:0] = i2c_cpr_reg; if (i2c_ctr_en == 1'b1) iprdata [15:0] = i2c_ctr_reg; if (i2c_rdr_en == 1'b1) iprdata [15:0] = i2c_rdr_reg; if (i2c_sr_en == 1'b1) iprdata [15:0] = i2c_sr_reg; if (i2c_tdr_en == 1'b1) iprdata [15:0] = i2c_tdr_reg; if (i2c_cr_en == 1'b1) iprdata [15:0] = i2c_cr_reg; end ","id":3,"section":"posts","summary":"\u003cp\u003e本章节讲述APB regesiter 模块。register 处于biu和byte_ctrl 之间，它的作用在于收取到来自biu模块的读写信号进行读写操作，之后转换成相应的控制信号对后面模块进行控制，同时byte_ctrl 和bit_ctrl 会产生相应的状态信号反馈给reg模块。\u003c/p\u003e","tags":["I2C 学习","IC Design","IC 面试"],"title":"I2C 模块设计|Master Reg 设计","uri":"http://unclefish.ink/my_blog.github.io/2020/03/i2c-%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1-master-reg-%E8%AE%BE%E8%AE%A1.html","year":"2020"},{"content":"hello 大家好，我是鱼叔。我最近花了两天左右的时间基于hexo和next搭建了个人的blog（传输门），中途遇到了一堆的bug以及相关的优化问题，想写这篇文章记录下来给想搭建blog的你一个参考。\n搭建blog的初衷 现在网络平台里有很多可以发表个人看法的平台，比如我派，比如知乎、简书等，那花费功夫搭建自己的个人blog到底有什么意义呢？在我看来，个人博客的意义在于自由性，因为这是你自己的平台，你可以自由地去发表个人想法和文章，而不用担心内容是否迎合具体某个平台的读者。其次，我将个人博客作为自己的一个分享型知识记录，我希望自己的经历或者知识可以给别人带来一点启发和帮助，也许某一个瞬间，当一个人在搜寻相关的知识，参考了你博客的内容并且留言感时，你会发现自己其实在给这个社会做贡献，你在无声中被别人所认可。\n相关的优化 前言  关于hexo  我所搭建的blog是基于hexo + GitHub的，因为hexo凭借它轻便快捷的特点，已经成为现在个人博客搭建的主流。我派已经有较为具体的搭建教程文章了，就不再详述搭建步骤。\nhttps://sspai.com/post/59337\n 关于NexT  NexT 是hexo主题中非常流行的一个，因为它功能齐全，而且插件丰富，成为大多数人的首选主题。当然流行就会出现一个问题，很容易撞车，大家的博客外表都非常相似。不过鱼叔认为博客只是载体，内容才是王道，所以在精力有限的情况下，没必要太纠结于博客外表的华丽，找一个顺眼的主题驻扎即可。本文接下去的内容也主要适用于NexT主题。\n  菜单栏修改问题 Next在主题的_config.yml文件中提供菜单栏的修改，只要搜索menu就可以找到，通过去除注释即可以在网页上进行渲染。然而鱼叔在修改next中的menu时会发现存在这样的报错 “cannot get %20” \u0026ndash; 无法找到相应的菜单。出现的原因是官方给的代码中多加了一个空格，导致网页无法渲染，个人除了删除注释外，要将“||”前的空格删除不然会导致菜单没法跳转。\nmenu: home: /|| home about: /about/|| user tags: /tags/|| tags categories: /categories/|| th archives: /archives/|| archive #schedule: /schedule/ || calendar #官方给的代码 || 前多加了空格  Hexo博客出现“Cannot GET/tags or categories”错误 next提供了标签和分类功能，但是在实现这个功能时常常会遇到\u0026quot;cannot get\u0026rdquo; 的问题，这是因为我们没有对它们进行初始化。具体解决方法如下：\n  在git bash 中输入以下代码创建相应的page：\nhexo new page \u0026quot;tags\u0026quot; hexo new page \u0026quot;categories\u0026quot;    在第一步完成后会在source文件夹中出现tags和categories的文件夹，在各自的文件夹里打开index.md文件进行修改(多加上一个type属性)：\ntitle: categories date: 2020-03-15 14:19:53 type: \u0026quot;categories\u0026quot; title: tags date: 2020-03-15 14:20:32 type: \u0026quot;tags\u0026quot;    底部下一页跳转问题 鱼叔在建立博客的时候发现底部下一页跳转按钮没有正常显示，如下图\n修改方式：\n打开主题 layout/_partials/pagination.swg 进行修改，将“i class”模块删除修改成如下模式(其中prev 和 next可以自定字样)：\n{% if page.prev or page.next %} \u0026lt;nav class=\u0026quot;pagination\u0026quot;\u0026gt; {{ paginator({ prev_text: 'prev', next_text: 'next', mid_size: 1 }) }} \u0026lt;/nav\u0026gt; {% endif %}  修改后结果为下图，实现正常的跳转按钮：\n如何让首页文章部分显示 next主题默认的是将你的文章全篇显示在自己的首页上，这就会导致一个问题，首页各个文章太长了不利于翻阅，那如何部分显示自己的文章呢？很简单，只要在个人的文章Markdown 中在想要显示的文章部分下面加上代码\u0026lt;!--more\u0026gt;，即可只在首页显示所需的文章部分。\n修改头像问题 将自己的头像复制到blog文件夹中的\\themes\\next\\source\\images中覆盖原来的avatar.png 文件即可。\n修改站点icon 当套用完next主题后，个人博客的站点图标会自动为next的logo，作为博主当然不能忍这个logo啦，那怎么修改呢？\n我们打开next的主题配置文件会发现有这样的设定：\nfavicon: small: /images/favicon-16x16-next.png medium: /images/favicon-32x32-next.png apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg  这就可以很清晰地发现去哪里修改了，只要在对应的路径上把原有的图片文件给替换成我们需要的文件就行了。这里给大家提供一个网站用于生成所需的icon同尺寸图像：https://www.favicon-generator.org/\n增加阅读时长和字数统计功能 next自带阅读时长和字数统计插件，我们所需要做的就是调用这两个工具。首先在主题的配置文件中修改：\npost_wordcount: item_text: true wordcount: true # 单篇 字数统计 min2read: true # 单篇 阅读时长 totalcount: false # 网站 字数统计 separated_meta: true  完成配置后，我们需要安装word-count 插件，在git bash中输入：\nnpm i --save hexo-wordcount  完成插件安装后，为了更好的显示，我们可以打开xxx_blog/themes/next/layout/_macro/post.swig ，在对应地方添加字words 和 min。可以通过搜索‘wordcount’ 和 ‘min2read’ 来定位。\n \u0026lt;span title=\u0026quot;{{ __('post.wordcount') }}\u0026quot;\u0026gt; {{ wordcount(post.content) }} words \u0026lt;/span\u0026gt; \u0026lt;span title=\u0026quot;{{ __('post.min2read') }}\u0026quot;\u0026gt; {{ min2read(post.content) }} min \u0026lt;/span\u0026gt;  配置搜索功能 next自带一个搜索功能，可以实现对站内内容的搜索。\n首先需要通过如下命令安装对应的搜索插件：\n然后在全局的配置文件（hexoblog目录下的_config.yml）中，增加配置如下内容：\n# Search Config search: path: search.xml field: post format: html limit: 100  然后在git hash 中加载相应的插件：\nnpm install hexo-generator-search --save npm install hexo-generator-searchdb --save  打开主题内的配置文件，找到 local_search 属性，配置开启本地搜索功能。\nlocal_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1  将自己的博客收录到谷歌搜索中 为了让自己的博客能被更多人搜索到，自然需要将自己的博客收录到谷歌引擎中，具体的操作如下：\n 添加资源  打开Google search Console, 在左上角添加资源：\n网址验证  选择网址前缀输入自己的博客网址。接下去就是对网站的验证，即证明网站是自己的。google 提供了多种方式进行验证，比较方便的是HTML 文件方式，它会产生一个HTML 文件，你只要将它放到博客source里然后再进行重新部署就行,（tips: 为了避免验证文件被hexo渲染，可以在验证html里添加‘layout：false’ 代码）。鱼叔采用的是HTML标记的方式，具体的方法就是将google提供的代码copy到 xxx_blog/themes/next/layout/_partials/head.swig中，放在头部的下面即可。\n 增加sitemap\n通过在线网址 sitemap生成自己博客的站点地图，然后将站点地图下载下来放到自己博客源public文件夹中（xxx_blog/public）。然后打开 Google console，点开左侧的添加站点地图，输入sitemap.xml，点击提交即可，一般会花2-3天时间进行收录。\n  增加评论功能 目前比较流行的两种评论系统是Valine 和 Giement，这里主要讲Valine的配置。\n  注册leancloud， leancloud注册网址\n  注册登陆后，访问控制台，创建应用，选择开发版，创建好之后就生成了对应的id和key\n  在主题配置文件中进行修改\n Valine. # You can get your appid and appkey from https://leancloud.cn # more info please open https://valine.js.org valine: enable: true appid: # 填入 App ID appkey: # 填入 App Key notify: false verify: false # placeholder: 请在此输入您的留言 # 默认留言框内的文字 avatar: \u0026quot;\u0026quot; # 修改留言者头像，具体代码可以参考valine官网 guest_info: nick,mail # 默认留言框的头部需要访问者输入的信息 pageSize: 10 #默认单页的留言条数    最后效果\n  博客中图床问题 这里推荐图床神器PicGo, 可以非常快捷地将图片上传到自己所需的云端中，而我采用的是PicGo结合腾讯云COS来搭建在线个人图床。\n相关的教程链接：https://sspai.com/post/59284\n总结 基本上讲完了我搭建博客时遇到的所有问题，我之前看过一个博主写的一句话，“搭建博客就像玩了一个游戏，你的博客就是你的角色，你总是会想方设法地给他升级“。博客优化其实是一个无止境的路，需要耐心和时间，但往往我们会过度的为了美化它而忘记了自己搭建的初衷。好的内容才是一个博客真正的灵魂。\n参考 Next 官方指南\n","id":4,"section":"posts","summary":"\u003cp\u003e\u003cimg src=\"https://image-1301586523.cos.ap-shanghai.myqcloud.com/way-4005288_1280.jpg\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003ehello 大家好，我是鱼叔。我最近花了两天左右的时间基于hexo和next搭建了个人的blog（传输门），中途遇到了一堆的bug以及相关的优化问题，想写这篇文章记录下来给想搭建blog的你一个参考。\u003c/p\u003e","tags":["hexo"],"title":"hexo next 主题优化 | 这里可能有你遇到所有问题的答案","uri":"http://unclefish.ink/my_blog.github.io/2020/03/hexo-next-%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96.html","year":"2020"},{"content":"下方结构图为I2C接口中的master模块示意图，这个章节主要用于讲述其中的biu模块。根据结构图可知，biu模块存在的地址在于APB interface 和APB register 之间，它的目的在于将复杂的AHB 接口信号转换为单周期的读写信号，这样方便对后面的reg进行操作。\nmodule apb_i2c_biu #( parameter ADDR_SLICE_LHS = 5, // addres [4:0] parameter APB_DATA_WIDTH = 32 ) ( // signals connect to APB module input\tpclk, input\tpresetn, // reset input psel, // select signal input\t[ADDR_SLICE_LHS-1 : 0] paddr, // 5bit addres input\tpwrite, input penable, input\t[APB_DATA_WIDTH-1 : 0]\tpwdata, output\treg [APB_DATA_WIDTH-1 : 0] prdata, //signals connect to register module input\t[15:0]\tiprdata, // ? output\twr_en, rd_en, output\t[ADDR_SLICE_LHS-3:0]\treg_addr, // ahb addres searching output\t[3:0]\tbyte_en, output\treg\t[31:0]\tipwdata );  写操作 当AHB实现写操作时，要求片选信号（psel）为高，使能信号（penable）为高，写信号（pwrite）为高，当满足这三个条件时，biu信号输出写使能（wr_en）高，来驱动后面的reg。当ahb数据到来时可直接存到输出reg（ipwdata）中。\n  写操作代码：\nassign wr_en = psel \u0026amp; penable \u0026amp; pwrite; // 写信号的要求 always @(pwdata) begin ipwdata = 32'b0; ipwdata [APB_DATA_WIDTH-1:0] = pwdata[APB_DATA_WIDTH-1:0]; //apb总线上的数据每次发生变化，就将数据传输到输出reg中 end    读操作 实现读操作时，要求在AHB读操作信号（pwrite 为低时）提前将reg中的数据传到输出数据缓存区prdata中。\n  关于读信号的判断\nbiu 输出读信号（rd_en）的条件为：pwrite 为低，psel为高，penable 为高。但是为了保证在读操作实行时提前将数据准备好，rd_en 在penable为低便使能，具体代码如下：\nassign rd_en = psel \u0026amp; !penable \u0026amp; !pwrite; // 读信号要提前产生，因为要求把数据提前放到APB总线上 // 数据传输过程 always @ (posedge pclk or negedge presetn) begin if(presetn == 1'b0) begin prdata \u0026lt;= {APB_DATA_WIDTH{1'b0}}; //apb 读寄存器中的数据清零 end else begin if (rd_en) begin prdata \u0026lt;= {16'b0,iprdata}; // 将读入的数据保存到apb reg中 end end end    具体的代码链接如下： Biu Ctrl Code\n","id":5,"section":"posts","summary":"\u003cp\u003e下方结构图为I2C接口中的master模块示意图，这个章节主要用于讲述其中的biu模块。根据结构图可知，biu模块存在的地址在于APB interface 和APB register 之间，它的目的在于将复杂的AHB 接口信号转换为单周期的读写信号，这样方便对后面的reg进行操作。\u003c/p\u003e","tags":["I2C 学习","IC Design","IC 面试"],"title":"I2C 模块设计| biu 模块","uri":"http://unclefish.ink/my_blog.github.io/2020/03/i2c-%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1-biu-%E6%A8%A1%E5%9D%97.html","year":"2020"},{"content":"I2C 总线是很实用的一个总线协议，也是IC 面试时可以讲出点东西的一个素材。鱼叔最近在学习I2C的IP 设计，并且会不断更新，整理成学习笔记分享在我的博客中，希望大家能有所收获。\nAPB I2C 总线协议 I2C UART SPI 接口对比  UART 异步接口，需要用波特率发生器来进行同步，传输速率较慢 SPI 同步接口（Master需要给Slave 提供一个同步时钟）四根信号线（clk/MISO/MOSI） I2C 慢同步 ， 半双工（SCL SDA）  I2C 帧结构 两根线， SDA-数据线，SCL-时钟线，半双工工作模式。\n结构：\n  Master：SCL 信号源，控制信息流\n  Slave: 处于等待状态，Master 会通过地址来搜寻所需要的slave，每一个slave都有一个固定的地址，并且地址的方式可以通过固定或者配置来实现。\n  基本流程   发送起始条件\n  发送接受设备的地址和任务操作；\n  发送或者接受数据\n  接受设备发送相应位 — 应答；\n  发送停止条件\n  一帧数据8bit， 其中[7:1]为设备地址，而最后一位为数据方向\n  [7:1] 地址\n  0: 0 — 发送地址，写操作；1 — 接受数据，读操作\n  起始条件 当SCL 和SDA是高电平，且 SDA由高电平到低电平切换；\n表示总线上要传输信息；\n总线在起始条件后表示处于忙碌状态；\n停止条件 当SCL 是高电平时，SDA由低电平向高电平切换时；\n本次通讯结束，总线进入空闲状态。\n位传输要求 每传输一个数据就产生一个时钟脉冲。并且在高电平时采样数据\n数据传输结构 数据流： [起始位] [接受数据的地址 6bit] [读写位 ] [数据1, 从7到0，高位先发] [ 应答信号] [数据2, 从7到0，高位先发] [ 应答信号] \u0026hellip; [应答] [停止位]\nI2C 的响应机制 Slave 需要在收到数据后给予应答信号，在相应期间，Master需要释放SDA线，而Slave需要将SDA线拉低，表示相应。\n无法响应情况：  如果从机没有响应，则主机要使数据线一直保持高电平，产生一个停止或者重复条件。 如果从机来不及处理数据，可以一直拉低时钟线，使主机处于等待状态  SCL 的线与逻辑保证了时钟线上的同步，比如说clk1 先拉低，但是clk2 的低电平还没有到，这时候MOS2 打开状态，整个SCL还是处于低电平状态，只有当所有的clk都到达变低后，线才被拉高，SCL同步机制来保证SCL 读取数据的同步性\n总线仲裁 多个主机使用总线时，当SCL 处于高电平时，根据SDA的电平来进行仲裁；\n规则；当主机需要将总线拉高时，但不能实现 —\u0026gt; 丢失仲裁 —\u0026gt; 退回到设备。\nSample 主机接受流程：\n 发送起始标志位 发送从机地址和读信号 从机接收到信号发送应答标志，开始发数据 主机接收到数据发送应答信号开始接受下一个数据 主机不想接受信号就发送一个NACK信号然后停止  ","id":6,"section":"posts","summary":"\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eI2C 总线是很实用的一个总线协议，也是IC 面试时可以讲出点东西的一个素材。鱼叔最近在学习I2C的IP 设计，并且会不断更新，整理成学习笔记分享在我的博客中，希望大家能有所收获。\u003c/p\u003e","tags":["I2C 学习","IC Design","IC 面试"],"title":"I2C 模块设计 | 协议基础","uri":"http://unclefish.ink/my_blog.github.io/2020/03/i2c-%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80.html","year":"2020"},{"content":"在留学申请中，文书会起很大的作用，一份好的文书会给你的教授留下比较好的印象，并且你可以在文书中弥补很多东西，比如如果GPA不理想，可以在文书里解释原因，比一个死板的成绩单会好用很多。那怎样写一份文书，或者说怎么修改一份文书，中介给我的文书我不知道好坏该怎么办？\n接下去我会围绕这个问题给出我在实际申请时的解决方案，在文章末尾处还会给大家一份《推荐信指南》的电子版书籍，点击链接就可以下载。\n谈及文书，文书一般涉及到的三个内容:PS（Personal Statement）、CV（Curriculum Vitae）、RL（Reference Letter）。其中感觉相对比较重要的是PS，即个人陈述，我其实更喜欢把它叫做自我介绍。\n-Personal Statement- 怎样的PS是才算是比较不错的呢？这就需要首先从Msc授课型硕士的目的开始讲起，Msc是为了培养适合工作的硕士，一般都采用授课的教学方式，可以类比国内的专硕，但是又有很大区别。Msc的学时为1到2年，根据地区和专业不同又有所区别。\nMsc的初衷是为了培养你的工作能力，所以你的PS里需要体现到你对你未来的职业规划，包括未来的工作方向，工作区域之类。这一点在很多文书上是容易忽略。在这里，我会给出两个PS的框架，一份是我在一次公开课上做的笔记，另一份是前辈们总结的。两个都是英文的方式表达，因为懒得翻译，不感冒的小伙伴可以直接跳过哈。推荐第一个框架。\n-1st Sample Outline for PS - Introductory paragraph：\n introduce your area of interest or research question discuss a problem your profession may help address  2nd paragraph Review your undergraduate coursework\n focus on your major discipline highlight the courses that prepare you for the program identify any gap in your training to be filled by the master program emphasise the skills and knowledge developed connect the dots across the courses.  3rd paragraph Review your undergraduate project experience\n focus on your 1-2 project adopt IMRD(introduction, method ,result ,discussion ) highlight the skill development and other learning experience discuss your inspiration and desire for further studies relate to the master program whenever possible.  4th paragraph your career plan\n your career interested how you developed the interest in such a career (related the experience discussed earlier) what skills and experience do you still need to implement such a career plan.  5th paragraph Why choose the target master program\n the specific courses that may strengthen you as a professional the faculty members you would like to work with for your thesis other learning opportunities that can help you accomplish you career goals why you will be an asset to the program.  6th paragraph Conclusion: reiterate the main points and summarise your main arguments.\n -2nd Sample Outline of PS- 1st Paragraph Describe the area of research that interests you and why. If you have already done some research work in this area, be sure to mention it. Also, explain why you think you are suitable for this area. You may also describe competitions in the area that you have done well in and special academic attainments. For example, a double major in mathematics and computer science probably set you apart from students who only studied computer science. If you have nothing special to say, then just mention briefly how you came to choose this area.\n2nd Paragraph Describe research programs you have worked on (one paragraph per program.)\n What did you find? What did you learn? What approaches did you try? Did these approaches work or not?  3rd Paragraph Explain why you feel you need a Masters degree or PhD.\n4th Paragraph Tell the reader why you want to go to that particular university. Make it easy for them:\n If you want to work with a particular person or persons tell them who you want to work with and why. If you want to work in a particular area, tell them why you want to work in that area in their university. If there is no particular person you want to work with or particular area you want to work in, explain why you would like to join their program.  5th Paragraph You can also state what papers you have read from that university and what you enjoyed about them or how they inspired you. Lastly, tell them what you hope to gain from their university.\n一些总结的tips：\n 确保你的PS控制在一到两页内，因为你是在给一个很忙的人看。 不要说你小时候想当科学家的故事，因为对于教授他们而言毫无意义。 尽可能地在文书中体现你所想申请的专业的相关信息，包括它的课程或者未来就业情况，这样可以表现你确实对这个他们的信息很了解，并且很渴望去读书。 把自己的PS多给身边的人看一看，然后根据他们的意见有选择性地进行修改。   -Curriculum Vitae- CV的话就是个人简历，要求精炼控制在一页之内，能让招生办的人看了你的简历就能大致知道你是否能被录取，可以理解为CV是脱水版的PS。我这里就Po上我删减版的CV框架给大家参考形式。\n-Reference Letter- RL是推荐信，一般学校的申请要求是提供两封来自老师的推荐信，当然如果你有实习的话，你也可以让你的实习主任给你写一份推荐信。原则上来说，给学生写推荐信是大学老师的一个职责，但是考虑到国内的实际情况，第一老师没那么多时间给你写推荐信，第二老师的英语水平有限而且对你的了解也没那么清楚。\n因此实际的操作方法是，自己以老师的口吻写推荐信，然后让老师阅览无误后签字。这样问题其实就转变为找怎样的老师给签字。\n首先，必须要找和自己比较熟悉的老师，因为推荐信里要求说明老师和学生是怎么认识的，认识有多久了之类的问题，只有比较熟悉的老师写的推荐信会比较有说服力。\n其次，如果可能的话，找和你申请的学校有相关经历的老师，比如你想申请东京大学，而你的老师中有一个是在日本留过学的话，就可以联系他“写推荐信”。\n关于大牛的推荐信，如果你能联系到你们专业里的大牛老师给你写推荐信，那就更好了，不过我觉得对于申请Msc项目来说，推荐信更多只是辅助作用，如果申请Mphil和Phd，那么一封大牛的推荐信会帮助很多。\n更多的推荐信细节可以下载链接里的《推荐信写作指南》\n- END -\n","id":7,"section":"posts","summary":"\u003cp\u003e在留学申请中，文书会起很大的作用，一份好的文书会给你的教授留下比较好的印象，并且你可以在文书中弥补很多东西，比如如果GPA不理想，可以在文书里解释原因，比一个死板的成绩单会好用很多。那怎样写一份文书，或者说怎么修改一份文书，中介给我的文书我不知道好坏该怎么办？\u003c/p\u003e","tags":["留学"],"title":"如何写好一份文书","uri":"http://unclefish.ink/my_blog.github.io/2020/03/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E4%B8%80%E4%BB%BD%E6%96%87%E4%B9%A6.html","year":"2020"},{"content":"在现磨咖啡当道的今天，速溶咖啡似乎已经进入了咖啡鄙视链的最底端，秉着「存在即合理」的理念，咱们来聊一聊速溶咖啡，以及如何选取一款不错的速溶咖啡。\n我和速溶咖啡的故事 鱼叔是一个咖啡爱好者，或者换句话，是一个咖啡因依赖患者。我从初中时期就开始喝咖啡，当然那时候条件有限，喝的是最廉价的雀巢 1+2 原味。虽然是速溶咖啡，但我喝出了各种花样，用热牛奶直接冲速溶，或者是拿冰块冰摇做一杯冰咖啡等等。速溶咖啡为我打开了一扇门，而我真正开始了解咖啡是在大学期间在咖啡馆兼职的时候。那时候我作为一名学徒开始接触现磨咖啡，从挑豆子磨粉，再到打奶泡拉花，我发现现磨咖啡才是真正的王者，支撑起整个咖啡世界的精彩。于是我开始非常鄙视速溶咖啡，觉得它缺乏一种艺术，是一个工业速成品。一杯好的咖啡涵盖了咖啡师投入的专注，就拿手冲咖啡来说，咖啡师要量粉、量水温，要细心得浇水，要把握闷蒸的时间等，这些细节才让我觉得咖啡是一个很棒的东西。\n然而啪啪打脸的是，当我在新加坡留学的时候又开始喜欢起了速溶咖啡，最简单的理由便宜、方便和稳定。\n 便宜：很容易理解，相比于现磨，速溶咖啡它的优势就是减少了人工成本，相对便宜。 方便：在快节奏的生活里，有时候没时间或者地方去买一杯咖啡，这时候一杯不错的速溶咖啡可以立马让你恢复工作状态。 稳定：速溶的口味可以保持一个很稳定的状态，而现磨口味则有很大的变化因素，鱼叔曾经就买到过很难喝的现磨。   速溶咖啡在 1890 年由新西兰人 David Strang 所发明并登记专利，1901 年由一个在美国芝加哥工作的日本科学家加藤サトリ做改良。\n乔治·华盛顿发明了大规模生产速溶咖啡的技术，并在 1910 年将其推向市场。\n为了应对咖啡豆过剩问题，巴西政府与雀巢公司在 1938 年发展出了更先进的喷雾干燥法用于速溶咖啡制造。具体做法是用热的蒸汽使咖啡豆中的水分蒸发，留下干燥的咖啡提取物。速溶咖啡能够很快的溶化在热水中，而且在储运过程中占用的空间和体积更小，更耐储存，因此在大众市场广受欢迎。\n速溶咖啡最早使用是在第二次世界大战的战场上，盟军士兵使用速溶咖啡作为日常饮品，在一定程度上提高了效率。\n—维基百科\n 如何挑选一杯速溶 谈到挑速溶咖啡，我们先来科普一个知识点，关于咖啡豆的品种。\n咖啡市场上的咖啡豆主要为两种：阿拉比卡（Arabica）咖啡豆 和罗布斯塔（Robusta）咖啡豆。其中阿拉比卡咖啡豆风味较好，通常作为精品豆和单品豆的原料，而罗布斯塔咖啡豆风味不足而且咖啡因含量较高偏苦，通常作为拼豆或者咖啡因提取原料。通过以上两个对比，其实大家应该也容易得出结论阿拉比卡的豆子偏贵，罗布斯塔的比较便宜，因此速溶咖啡商经常会将罗布斯塔豆子作为速溶咖啡的原料来降低成本。因此挑选速溶咖啡的第一点就是看它的 配料表中罗布斯塔的占比，占比越小说明该咖啡越好，当然最好挑纯阿拉比卡豆子的速溶咖啡。\n第二点看 其他的掺杂物。咖啡商为了让大家能接受速溶咖啡，就经常往里面加一些其他调味品来中和苦味，毕竟罗布斯塔比较苦。通常的调味品有糖、植脂末、乳化剂等。其中要注意的是植脂末，俗称“奶精”，这种人工添加剂是一种反式脂肪酸会提升血脂，不利于人体健康。因此大家看到含植脂末的速溶咖啡就统一别买了吧，相应的“咖啡伴侣”也不建议购买。如果咖啡苦口怎么办，鱼叔建议兑新鲜的牛奶，一方面中和口感，另一方面还能补钙来弥补咖啡带来的钙流失。\n推荐几款速溶咖啡 其实注重了咖啡豆的品种和添加剂成分之后就比较容易挑选咖啡了，在这此之上的就是进阶挑咖啡豆的风味了。鱼叔认为速溶咖啡谈风味其实是有点勉强了，因为基本上在制作过程中豆子风味都会被破坏掉，唯一还可以挑选的就是咖啡因强度，一般来说烘焙越久的咖啡豆越苦咖啡因含量也就越高，这一点会在速溶咖啡的包装上体现。\n\\1. 雀巢醇品系列咖啡\n 类型：黑咖啡 成分：混合咖啡豆（含罗布斯塔豆子） 口感：偏苦涩  \\2. 雀巢 GOLD 咖啡\n 类型：黑咖啡 成分：阿拉比卡咖啡豆 口感：酸苦交融  \\3. 雀巢 GOLD 产地系列\n 类型：黑咖啡 成分：阿拉比卡咖啡豆 口感：略有风味感   总结 可能看了推荐的朋友会说，为什么我推荐的都是纯黑咖啡。事实上，我比较鼓励的速溶咖啡也只是限于黑咖啡，因为各种所谓的速溶拿铁和摩卡其实都是加了很多添加剂的，即使雀巢推出了纯奶粉拿铁，我也还是建议自己买黑咖啡兑牛奶，这样会来的比较健康。当然，有条件的朋友可以直接上挂耳咖啡或者胶囊咖啡。\n","id":8,"section":"posts","summary":"\u003cp\u003e在现磨咖啡当道的今天，速溶咖啡似乎已经进入了咖啡鄙视链的最底端，秉着「存在即合理」的理念，咱们来聊一聊速溶咖啡，以及如何选取一款不错的速溶咖啡。\u003c/p\u003e","tags":["咖啡"],"title":"如何挑一杯不错的速溶咖啡","uri":"http://unclefish.ink/my_blog.github.io/2020/03/%E5%A6%82%E4%BD%95%E6%8C%91%E4%B8%80%E6%9D%AF%E4%B8%8D%E9%94%99%E7%9A%84%E9%80%9F%E6%BA%B6%E5%92%96%E5%95%A1.html","year":"2020"},{"content":"近期我去电影院看了一部蛮有意思的反战片《Jojo Rabbit》(中文翻译：少年乔乔的异想世界)，在这里推荐给大家。刚开始看到这个电影名的时候，我以为只是给孩子看的小朋友电影，很难和战争片联系在一起，但是在看电影的时候才发现这是一部以儿童视角拍的反战片, 充满着满满的黑色幽默。\n故事梗概 电影的故事背景发生在二战末期的德国，主人公乔乔是一个十岁的德国男孩，像其它男孩一样在童子军军营里接受德国纳粹的思想教育。他有一个幻想的希特勒朋友，这个希特勒搞笑亲民和真实的希特勒完全不同。由于一次失误的手榴弹训练导致自己受伤，乔乔只能退出童子军做幕后的文职人员，后来在家中养伤的时候发现自己家里藏着一个犹太人，并且发觉自己的母亲是一个隐藏的反战分子，乔乔陷入要不要告发自己家里人的深深矛盾里。\n请输入图片标题\n关于兔子的解读 在电影中其实出现过三次兔子。第一只兔子出现在乔乔的训练营中，乔乔被要求用武力去杀死兔子，结果他做不到然后放兔子走被众人嘲笑；第二只兔子出现在他饥饿到处找吃的时候，在雪地里他看到了兔子却没有抓它充饥；第三只兔子出现在他的画册里，里面画着一只在笼子里的兔子，最后他克服了内心的自私打开“笼子”，放出了那只“兔子”。\n就我个人的理解，兔子象征着乔乔的本心，即使在那个纳粹狂热的年代，他也没有失去内心里的那份善良。第三只“兔子”之所以打引号，是因为它代表着那个藏在他家里的犹太女孩，当女孩问他外面战况如何时，他撒了个谎说德国纳粹赢了，希望她能一直藏在他家里。事实上，这是一段内心的心里斗争，他喜欢这个女孩不希望她离开，但是他又不想限制她的自由，当然最后他还是选择打开了“笼子”，带女孩出去。\n高光母亲 \u0026ndash; 黑暗里的明灯 电影中有一个很美好的角色就是乔乔的母亲罗茜（由斯嘉丽扮演）。乔乔的父亲去远方打仗了，家里全靠母亲一个人支撑着。这位母亲时尚靓丽，非常反感战争但是却又不得不假装支持自己的孩子去当纳粹。她常说的一句话就是，你只是一个十岁的孩子，是喜欢爬树又老掉下来的年纪，而不是拿着枪拿着刀的年纪。令人比较深刻的一个桥段是乔乔在桌上和罗茜吵起来，罗茜立马用石灰擦在脸上装胡子，然后穿起一件大衣扮演乔乔的父亲去教训他，这样一个风趣的母亲其实在尽她的努力去保护乔乔的童年。\n当然这样一个美好的人往往会成为战争片里牺牲的角色。罗茜最后因为偷偷发反战的纸条而被抓起来吊死，而这一幕导演用了一个很独特的手法来描绘：乔乔被一只漂亮的蝴蝶吸引，然后在追蝴蝶的路上不小心来到了刑法场，看到了一双熟悉的鞋子垂挂在空着，才发现是自己的母亲，他很想帮他的母亲把鞋带给系上，却发现他一直都还没学会系鞋带。鞋带其实是电影中的一个线索，象征着乔乔的成长，从最初的一直让母亲系鞋带，到母亲去世时自己都没法帮她系鞋带，再到最后战争结束时帮犹太女孩系鞋带，这一些列的变化也说明了这个孩子的成长。\n 反战主题的黑色幽默 作为一部幽默的反战片，这部电影中有很多带有讽刺意味的喜剧元素，最明显的就是一帮十岁的小男孩拿着各种巨大的武器去冲锋，这种强烈反差感会给人带来笑点也会让人反思战争对孩子的伤害,世界和平才能给孩子一个更好的成长环境。\n另一个幽默点应该就是乔乔幻想的希特勒朋友，和大众想象的希特勒不同，这位元首很搞笑，不断得给乔乔意见，其实从另一个角度讲，这是乔乔内心里纳粹思想的具象化。从最初不断听取希特勒的意见再到后来直接踢走他，这是乔乔内心成长的表现，变得不再受外界狂热思想的干扰。\n总结 无论是作为喜剧片还是反战片，《JoJo Rabbit》都是一部不错的电影，推荐大家有空的时候可以去看一下。\n","id":9,"section":"posts","summary":"\u003cp\u003e近期我去电影院看了一部蛮有意思的反战片《Jojo Rabbit》(中文翻译：少年乔乔的异想世界)，在这里推荐给大家。刚开始看到这个电影名的时候，我以为只是给孩子看的小朋友电影，很难和战争片联系在一起，但是在看电影的时候才发现这是一部以儿童视角拍的反战片, 充满着满满的黑色幽默。\u003c/p\u003e","tags":["影评"],"title":"另类反战片 - 《JoJo Rabbit》","uri":"http://unclefish.ink/my_blog.github.io/2020/03/%E5%8F%A6%E7%B1%BB%E5%8F%8D%E6%88%98%E7%89%87-jojo-rabbit.html","year":"2020"},{"content":" 在第77届金球奖颁奖典礼上，导演萨姆·门德斯凭借《1917》爆冷获得最佳导演奖和最佳剧情奖。\n 请输入图片标题\n在讲述这部电影之前，我先简单说一下自己看完电影后的感受。我是在新加坡观看的这部电影（国内可能得再过一段时间上映），起初是因为看剧照的时候发现有卷福，就立马对这部篇子产生了浓厚的兴趣，但是在观影的时候才发现卷福只是一个简单客串（略有失望）。整部电影带给我的第一感觉就是意犹未尽，没有太多的剧情转折，结果也跟预料的一样，甚至是电影结束后我还坐着在想结束了吗？但这一点并不影响我对这部电影的看法，因为这就是根据一个真实故事改编的，导演也是在努力去还原战场的情况，正如我在题目中提到的，在这部电影里我看到了战争的样子，导演带给了我们一种战争浸入式的体验。\n整部电影的剧情很简单，故事发生在1917年4月6日，也就是一战时期。两个士兵接收到任务在第二天凌晨之前到前线传递一封信 ———— “取消下一次进攻，因为德军有埋伏”。中途一个士兵A不幸去世了,士兵B继续执行任务，最后士兵B及时完成了任务，使前线1600名士兵存活下来，并且受士兵A的嘱托将他去世的消息告诉了在前线打仗的A的兄长。整个电影故事就一直围绕着送信这条路展开，其实换一个角度看，《1917》更像是一部公路电影。\n Tips :公路电影（英语：Road Movie）或称为公路片是一种将故事主题或背景设定在公路上的电影类型，剧中的主角往往是为了某些原因而展开一段旅程，剧情会随着旅程进展而深入描述主角的内心世界。  电影最厉害的一个部分是它的长镜头设计。其实当谈到长镜头的时候，笔者特意去搜查了相关资料去查证，发现长镜头的拍摄很难，因为是一镜到底所以必须要让演员和导演达成非常好的默契，如果中途出现了差错则整段要重新拍摄。相应的，这样的长镜头视角会使画面更加流畅自然，更加容易让观影者沉入其中。这就相当考验导演的功夫了，事实表明导演萨姆·门德斯出色地完成了这个任务。\n Tips: 长镜头（Long Take，或称为一镜到底、不中断镜头或长时间镜头）是一种拍摄手法，它相对于剪接式（蒙太奇）的拍摄方法。——维基百科  相比于一般的战争片，这部电影显得过分安静了，没有宏大的炮火厮杀，有的只是德军退去后空空的战壕，破旧的楼房，以及路边腐烂的尸体，但就是这些安静的东西直接有力地控诉了战争的残酷。这其实是一部披着战争外衣的文艺片，导演很平静得在讲一些不平静的事。\n《1917》带给人对于战争的感觉是沉浸式的，因为观影者很容易能代入主角的情绪里，就像我朋友和我一块儿看的时候说的—“很像真人版刺激战场”。至于为什么这种代入感可以那么强，我给出两个原因：\n 整个长镜头画面把重心都聚焦在主角身上，没有其他的东西会使人分心，这样观影者很容易把自己代入到主角身上。 场景的渲染。导演在场景的布置上非常用心，无论是空无一人的战壕还是还是毫无生机的小镇，都渲染出一种凄凉令人胆寒的感觉，此外用音乐去烘托主角的紧张感，可以很好地带领观影者的情绪。   最后\n我更希望的是大家能以看一部文艺片的方式去看这部电影，静静体会导演巧妙的拍摄手法。另外，这部片子具化了我想象中的战争，让我对战争的残酷性有了更深刻的理解，和平才是最重要的。\n","id":10,"section":"posts","summary":"\u003cblockquote\u003e\n\u003cp\u003e在第77届金球奖颁奖典礼上，导演萨姆·门德斯凭借《1917》爆冷获得最佳导演奖和最佳剧情奖。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg src=\"https://cdn.sspai.com/2020/01/15/38a9232caabaf678a382008c1ce67ee9.jpg?imageMogr2/quality/95/thumbnail/!1420x708r/gravity/Center/crop/1420x708/interlace/1\" alt=\"img\"\u003e\u003c/p\u003e","tags":["影评"],"title":"《1917》— 我在里面看到了战争","uri":"http://unclefish.ink/my_blog.github.io/2020/03/1917-%E6%88%91%E5%9C%A8%E9%87%8C%E9%9D%A2%E7%9C%8B%E5%88%B0%E4%BA%86%E6%88%98%E4%BA%89.html","year":"2020"},{"content":"提起留学，大家的刻板印象基本上都是贵，富二代才能去。事实上留学这件事确实是需要一定的经济投入，但这并不表明只有富二代才能去，现在的工薪家庭也是可以支撑起一个孩子的留学花费。就我个人的经历来言，我的家庭并不富裕，父母都是工薪阶层，但是他们依然支持我去海外攻读硕士学位，我对他们非常的感激。至于我为什么选择新加坡去留学，我会分成以下几个点为大家讲解。（注意：这篇文章的目的不是为了鼓励大家去留学，而是希望给那些有想法想出国的同学做一个参考）\n新加坡鱼尾狮 Point 1 : 性价比 第一个要提的就是新加坡留学的性价比。相比于美国和英国，新加坡的留学费用和生活成本会低很多，学校食堂平均一顿饭的价位在20rmb到50rmb之间，对学生来说已经是很友好的了。除此之外，一些高校会提供宿舍让学生申请，平均价位大概是2500rmb一个月，已经是相当的便宜了。\n关于学费，新加坡政府还为留学生提供了一个就业协议，可以免除将近80%的学费，而相应的学生毕业后要在新加坡工作三年（适合打算毕业后就留坡工作的同学）。另外，当地的银行还可以为留学生提供90%学费的免息贷款，可见新加坡为了呼吁大家来留学也是下了很多功夫的。如果一个学生签署了就业协议和免息贷款，那他基本上只要花费相应的生活费就可以来留学了，这对于工薪家庭是一个很好的消息。（注意事项：不是每一个专业都可以签署就业协议，具体的情况要去查看相应学校的官网）\nPoint 2 : 学校质量 说起留学，大家比较关心的肯定就是学校的质量了，毕竟留学生多了后，各种海外高校参差不齐。这里笔者推荐的两所高校是新加坡南洋理工大学(NTU)和新加坡国立大学(NUS)。这两所高校的名声估计大家也是有所了解，根据最新的2020QS世界大学排名, 两所大学并列第11名。当然排名只是作为参考的一个标准，就我个人的学习体会，这两所大学的老师还是相当负责任的，并且学校名声被很多企业所认可。给打个比方，NTU 和 NUS 有点像新加坡的清华和北大。\n2020 QS 世界大学排名\nPoint 3 : 社会氛围容易融入 在来新加坡留学前我没有出过国，因此很多时候担心留学后会不习惯外面的生活。事实上，新加坡将近70%是华人，大家都会说汉语，基本的生活购物没有任何问题。也许有人会问，这样经常性的说汉语是不是没法提高自己的外语水平？这里必须得承认，新加坡的外语氛围没有欧美来的浓厚，但这并不表明你的外语没法提高。所有的授课形式都是英文的，教授也都喜欢用英文和学生交流，在纯英文环境的熏陶下，其实外语水平也是在不断提升的。\n关于饮食方面，在饮食上新加坡是一个多种文化交融集齐了各地美食的地方，无论是中餐西餐，还是印度餐马来餐，你都可以在这小小的地方找到你想要吃的食物。值得一提的是，很多国内比较流行的餐厅在新加坡都有分店，比如海底捞、喜茶、谭鱼头等。\n新加坡美食\u0026ndash;辣椒螃蟹\nPoint 4 : 安全性 出门在外最重要的是讲究安全，新加坡可以号称是全球最安全的国家之一了，这也是我当初考虑来新加坡留学的重要原因。新加坡到底有多安全？给大家举个例子，新加坡法律规定晚上10.30后不允许任何超市和零售店卖酒，这种严格的法令使这里根本没有什么深夜醉汉，极大地保障了人们夜晚出行的安全。其实当初在申请学校时也曾考虑过香港，不过最后还是被新加坡的安全性给打动了，现在看来确实是一个很明智的选择。\nPoint 5: 申请难度 关于申请难度的问题其实是因人而异的，每个人的背景和特点不同因此很难一概而论。在这里我给出一个针对理工科比较平均的申请背景条件：雅思6.5，平均分80+，本科学校985\u0026amp;211会给予加分。新加坡学校的申请我个人觉得不难，建议自己DIY而不是找中介。\n总结 这篇文章只是简单得介绍了一下我当初选择新加坡留学的几个点，笔者最后选择的是 南洋理工大学和慕尼黑工业大学合办的芯片设计专业，可以同时体会到德国和新加坡的教育。如果对联合培养专业有兴趣的可以给我留言，我会一一答复。\n","id":11,"section":"posts","summary":"\u003cp\u003e\u003cimg src=\"https://cdn.sspai.com/2020/01/06/dc023de5af1660bdac144351c46171bf.jpg?imageMogr2/quality/95/thumbnail/!1420x708r/gravity/Center/crop/1420x708/interlace/1\" alt=\"img\"\u003e\u003c/p\u003e\n\u003cp\u003e提起留学，大家的刻板印象基本上都是贵，富二代才能去。事实上留学这件事确实是需要一定的经济投入，但这并不表明只有富二代才能去，现在的工薪家庭也是可以支撑起一个孩子的留学花费。就我个人的经历来言，我的家庭并不富裕，父母都是工薪阶层，但是他们依然支持我去海外攻读硕士学位，我对他们非常的感激。至于我为什么选择新加坡去留学，我会分成以下几个点为大家讲解。（注意：这篇文章的目的不是为了鼓励大家去留学，而是希望给那些有想法想出国的同学做一个参考）\u003c/p\u003e","tags":["留学"],"title":"新加坡留学 | 关于我为什么要去新加坡留学","uri":"http://unclefish.ink/my_blog.github.io/2020/03/%E5%85%B3%E4%BA%8E%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%8E%BB%E6%96%B0%E5%8A%A0%E5%9D%A1%E7%95%99%E5%AD%A6.html","year":"2020"},{"content":"前言 | 加法器是逻辑设计里比较基础的一个模块， 本文将会就加法器的原理，设计方法和电路仿真来进行讲述。\n1. 半加器 半加器只有两个输入，一个输出，不存在进位项，因此一个半加器的真值表如下：\n{% asset_img 1.png %}\n根据真值表，我们可以得出逻辑表达式： $$ sum = a \\oplus b $$\n$$ cout = a \\bullet b $$\n2. 全加器 全加器的输入中包含来自上一个加法器的进位项，因此全加器的输入为a、b、c_in，输出为sum、c_out。\n{% asset_img 2.png 真值表%}\n根据真值表，（通过画卡诺图）我们得出它的逻辑表达式： $$ sum = a\u0026rsquo;b\u0026rsquo;\\bullet cin + a\u0026rsquo;b\\bullet cin'+ ab\u0026rsquo;\\bullet cin\u0026rsquo; + ab\\bullet cin $$\n$$ cout = a\u0026rsquo;b\\bullet cin+ab\u0026rsquo;\\bullet cin +ab\\bullet cin'+ ab\\bullet cin $$\n通过化简，我们可以得到比较简单的表达方式： $$ sum = a \\oplus b \\oplus cin $$\n$$ cout = (a \\oplus b) \\bullet cin +ab $$\n通过以上的表达方式，我们可以用半加器来搭建一个全加器（面试常考题）：\n{% asset_img 3.png %}\nCode // Code your design here module add_half (output c_out,sum, input a,b); xor M1 (sum, a, b); and M2 (c_out,a,b); endmodule module add_full(output sum,c_out, input c_in,a,b); wire w1,w2,w3; add_half M1 (w1,w2,a,b); add_half M2 (sum,w3,c_in,w1); or M3(c_out,w3,w2); endmodule ","id":12,"section":"posts","summary":"\u003cp\u003e前言 | 加法器是逻辑设计里比较基础的一个模块，\n本文将会就加法器的原理，设计方法和电路仿真来进行讲述。\u003c/p\u003e","tags":["IC Design","加法器"],"title":"简单加法器的设计","uri":"http://unclefish.ink/my_blog.github.io/2020/03/%E7%AE%80%E5%8D%95%E5%8A%A0%E6%B3%95%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1.html","year":"2020"},{"content":"这篇文章主要讲解了如何设计一个异步Fifo。\n1. 资料 异步FIFO设计（1）\n异步FIFO设计原理及Verliog源代码_网络_deng_d1的博客-CSDN博客\n2. 原理介绍 {% asset_img 1.png %}\n2.1 使用FIFO的情况  两个不同时钟域进行数据传输时可以用FIFO 对于不同宽度的数据接口也可以用FIFO， 例如单片机8位输出，而DSP 16位数据输入。  2.2 FIFO的相关参数  FIFO的宽度：表示FIFO进行一次读写操作的数据位。 FIFO的深度：指的是FIFO能存储多少个N位的数据，N为宽度。 满标志：FIFO已满或将要满时由FIFO的状态电路送出的一个信号，以阻止FIFO的写操作继续向FIFO中写数据而造成溢出（overflow） 空标志：FIFO已空或将要空时由FIFO的状态电路送出的一个信号，以阻止FIFO的读操作继续从FIFO中读出数据而造成无效数据的读出（underflow）。 读时钟：读数据所遵循的时钟。 写时钟：写操作所需要遵循的时钟。 读指针：指向下一个读出地址。读完后自动加1 写指针：指向下一个写入地址，写完后自动加1  2.3 空满状态的判断 FIFO空满判断与地址转换的思考_网络_zyn1347806的博客-CSDN博客\n异步fifo设计（1）\n 用格雷码来作地址判断（多引入一位作位判断，比如设计深度为8，宽度为8的异步FIFO，设计其指针位数为4,即 n+1）  当最高位和次高位相同时，其余位相同认为是读空 当最高位和次高位不同时，其余位相同认为是写满    2.4 读空标志位的产生 异步FIFO设计(非常详细，图文并茂，值得一看！）\nFIFO中存在两种指针，rd_ptr 和 wr_ptr。只有两种状态下FIFO才会为空：\n 系统复位，读写指针都被清空。 读出速度大于写入速度，读地址赶上写地址。  空标志位的产生要在读时钟域里完成，这样不至于FIFO为空时，而空标志位还没有发生，但是可能发生FIFO里已经有数据了，但是空标志位还是没有被撤销，不过就算在最坏的情况下，空标志撤销也只是滞后3个周期（因为会需要时钟的同步，经过两级触发器）。还有一种情况，就是空标志比较逻辑检测到读地址和写地址相同后，紧接着发生写操作，导致写地址加1，由于同步模块的滞后性，导致没法及时更新写地址，会产生一个虚假的空信号，称作“虚空”。\n2.5 读满标志位的产生 读满状态可以理解为，读地址超写地址一圈，两个地址仍然在同一个地方，这时候引入指示位来进行区别和判断。\n读满状态判断：\n  最高位相异，因为两个指针速度不同， 写超前于读。\n  出去最高位，次高位取反后两者相同。比如：写指针已经走了一圈了跑到3，此时写指针：1110，而读指针第一次走到3，指针数值为：0010。⇒ 发现最高位和次高位均不同，表示满状态。\n  相应的，如果最高位和次高位均相同则表示空状态。\n{% asset_img Untitled.png %}\n  3.代码的实现 这里以一个8x8的fifo作为案例来进行代码的设计，之后再做一个fifo的封装实现自定义化模块。\n3.1 格雷码转换 需要用Gray Code来实现地址，从而降低亚稳态。\n基本的转换关系：\n 二进制转格雷码：  G[ n-1 ] = b[ n - 1 ] （最高位） G [i] = b [ i ] ^ b [i + 1]   格雷码转换二进制：  b[n-1] = G [n-1] b [ i ] = G [ i ]^ G [i+1] ^ \u0026hellip;\u0026hellip;^ G[ n - 1] = G [ i ] ^ b[ i + 1 ]    EDA link: https://www.edaplayground.com/x/4QrG\n//sample of Binary to Gray module B2G ( B, // B input binary G // output Gray ); input wire [3:0] B; output reg [3:0] G; always @(*) begin // 使用always时，要加@ G [3] = B [3]; G [2] = B[2] ^ B[3]; G [1] = B[1] ^ B[2]; G [0] = B[0] ^ B[1]; end endmodule //TestBench module tb (); reg [3:0] B,G; reg [2:0] i; // reg clk; initial begin $dumpfile(\u0026quot;dump.vcd\u0026quot;);// dump waive $dumpvars(1, tb); B = 0; i = 0; #10; B =1; #10; for (i=0; i\u0026lt;=7; i = i+1) begin B = B +1; #10; end end B2G dut( .B(B), .G(G) ); endmodule  3.2 写模块控制 写模块的功能\n 写信号来的时候，写指针地址加1 将wr 指针和rd 指针进行比较，看是否写满了。其中注意的是，满状态要将读指针同步到写时钟里，需要进行同步后再比较。  输入信号：wr_clk, wr_en, wr_rst_n, rd_add_glay\n输出信号：wr_add_bin, wr_add_glay\nEDA link https://www.edaplayground.com/x/5565\n// Code your design here `include \u0026quot;B2G.v\u0026quot; module wr_ctrl ( input wr_clk, input wr_rst_n, input wr_en, input [3:0] rd_add_glay, output [3:0] wr_add_bin, output [3:0] wr_add_glay, output reg wr_full ); reg [3:0] wr_add_bin_r; reg [3:0] wr_add_glay_r; reg [3:0] rd_add_glay_r1; reg [3:0] rd_add_glay_r2; // 地址增加模块 always @ (posedge wr_clk or negedge wr_rst_n or posedge wr_en) begin if (wr_en) begin // 所有的操作都是在始能下开始的 if (!wr_rst_n) begin //复位操作 wr_add_bin_r \u0026lt;= 0; //地址指针复位 wr_full \u0026lt;= 0; end else if (!wr_full) begin //不满情况下 wr_add_bin_r \u0026lt;= wr_add_bin_r + 1;// 地址加1 end end end //调用格雷码转换 B2G wr_B2G( .B (wr_add_bin_r), .G (wr_add_glay_r) ); //判断满状态，如果格雷码首两位和读地址互异，则满 //同步读地址 always @(posedge wr_clk) begin {rd_add_glay_r2,rd_add_glay_r1} \u0026lt;= {rd_add_glay_r1, rd_add_glay} ; end always @(*) begin wr_full = (rd_add_glay_r2[3]^wr_add_glay_r[3]) \u0026amp;\u0026amp; (rd_add_glay_r2[2]^wr_add_glay_r[2]) \u0026amp;\u0026amp; (rd_add_glay_r2[1:0] == wr_add_glay_r [1:0]); // 首两位互异，且后几位相同 end assign wr_add_bin = wr_add_bin_r; assign wr_add_glay = wr_add_glay_r; endmodule  3.3 读模块控制 功能代码和写模块相似，只是空标志的判断条件不同，要求两个地址完全相同才可以。\nEDA Link: https://www.edaplayground.com/x/3tfy\n// Code your design here `include \u0026quot;B2G.v\u0026quot; module rd_ctrl ( input rd_clk, input rd_rst_n, input rd_en, input [3:0] wr_add_glay, output [3:0] rd_add_bin, output [3:0] rd_add_glay, output reg rd_empty ); reg [3:0] rd_add_bin_r; reg [3:0] rd_add_glay_r; reg [3:0] wr_add_glay_r1; reg [3:0] wr_add_glay_r2; // 地址增加模块 always @ (posedge rd_clk or negedge rd_rst_n or posedge rd_en) begin if (rd_en) begin // 所有的操作都是在始能下开始的 if (!rd_rst_n) begin //复位操作 rd_add_bin_r \u0026lt;= 0; //地址指针复位 rd_empty \u0026lt;= 0; end else if (!rd_empty) begin //不满情况下 rd_add_bin_r \u0026lt;= rd_add_bin_r + 1;// 地址加1 end end end //调用格雷码转换 B2G rd_B2G( .B (rd_add_bin_r), .G (rd_add_glay_r) ); //判断满状态，如果格雷码首两位和读地址互异，则满 //同步读地址 always @(posedge rd_clk) begin {wr_add_glay_r2,wr_add_glay_r1} \u0026lt;= {wr_add_glay_r1, wr_add_glay} ; end always @(*) begin rd_empty = wr_add_glay_r2 == rd_add_glay_r ; // 地址相同时，表示读空 end assign rd_add_bin = rd_add_bin_r; assign rd_add_glay = rd_add_glay_r; endmodule  3.4 FIFO Mem Ctrl 主体部分会建立一个FIFO的mem，并且输入数据和读出数据。\n控制模块功能简介：\n 根据地址将对应的数据存储或者读取 EDA link https://www.edaplayground.com/x/bWf  Bug ： 因为弄错数组的写法，导致出现了bug reg [wordsize : 0] array_name [0 : arraysize]; 其中第二个是0-size，例如需要生成8x8 size的数组，应该为 reg [7:0] mem [0:7] 不是 reg [7:0] mem [2:0] ;\nmodule fifo_mem ( input wr_clk, input rd_clk, input rst_n, input [7:0] wdata, input [3:0] wr_add_bin, //写地址 input [3:0] rd_add_bin, //读地址 input wr_full, input rd_empty, output reg [7:0] rdata ); // 建立一个8x8的reg reg [7:0] fifo_mem [0:7]; //建立一个宽度为8深度也为8的mem reg [2:0] wr_add; //内部3位地址 reg [2:0] rd_add; //内部3位地址 reg [2:0] i; assign wr_add = wr_add_bin [2:0]; assign rd_add = rd_add_bin [2:0]; // 初始化 always @(negedge rst_n) begin if (!rst_n) begin for (i=0; i\u0026lt;=7 ; i = i+1) begin fifo_mem [i] \u0026lt;= 0; end end end always @(posedge wr_clk) begin if (!wr_full) begin fifo_mem [wr_add] \u0026lt;= wdata; end end always @(posedge rd_clk) begin if (!rd_empty) rdata \u0026lt;= fifo_mem [rd_add] ; end endmodule  3.5 Top level 各模块集成 EDA link : https://www.edaplayground.com/x/6Mfp\n// Code your design here `include \u0026quot;fifo_mem.v\u0026quot; `include \u0026quot;wr_ctrl.v\u0026quot; `include \u0026quot;rd_ctrl.v\u0026quot; `include \u0026quot;B2G.v\u0026quot; module fifo( input wr_clk, input rd_clk, input rst_n, input wr_en, input rd_en, input [7:0] data_i, output reg [7:0] data_o, output reg full, // 用于控制数据的输入 ); wire [3:0] wr_add_glay; wire [3:0] rd_add_glay; wire [3:0] wr_add_bin; wire [3:0] rd_add_bin; wire empty; wire wr_rst_n,rd_rst_n; assign wr_rst_n = rst_n; assign rd_rst_n = rst_n; fifo_mem dut( .rst_n (rst_n), .wr_clk (wr_clk), .rd_clk (rd_clk), .wdata (data_i), .wr_add_bin(wr_add_bin), .rd_add_bin(rd_add_bin), .wr_full(full), .rd_empty(empty), .rdata(data_o) ); wr_ctrl write( .wr_clk(wr_clk), .wr_rst_n(wr_rst_n), .wr_en(wr_en), .rd_add_glay(rd_add_glay), .wr_add_bin(wr_add_bin), .wr_add_glay(wr_add_glay), .wr_full(full) ); rd_ctrl read ( .rd_clk(rd_clk), .rd_rst_n(rd_rst_n), .rd_en(rd_en), .wr_add_glay(wr_add_glay), .rd_add_bin(rd_add_bin), .rd_add_glay(rd_add_glay), .rd_empty(empty) ); endmodule  {% asset_img 3.png Simulation Result %}\n","id":13,"section":"posts","summary":"\u003cp\u003e这篇文章主要讲解了如何设计一个异步Fifo。\u003c/p\u003e","tags":["IC Design","FIFO"],"title":"异步fifo的设计","uri":"http://unclefish.ink/my_blog.github.io/2020/03/%E5%BC%82%E6%AD%A5fifo%E7%9A%84%E8%AE%BE%E8%AE%A1.html","year":"2020"}],"tags":[{"title":"FIFO","uri":"http://unclefish.ink/my_blog.github.io/tags/fifo.html"},{"title":"hexo","uri":"http://unclefish.ink/my_blog.github.io/tags/hexo.html"},{"title":"I2C 学习","uri":"http://unclefish.ink/my_blog.github.io/tags/i2c-%E5%AD%A6%E4%B9%A0.html"},{"title":"IC Design","uri":"http://unclefish.ink/my_blog.github.io/tags/ic-design.html"},{"title":"IC 面试","uri":"http://unclefish.ink/my_blog.github.io/tags/ic-%E9%9D%A2%E8%AF%95.html"},{"title":"mydock","uri":"http://unclefish.ink/my_blog.github.io/tags/mydock.html"},{"title":"加法器","uri":"http://unclefish.ink/my_blog.github.io/tags/%E5%8A%A0%E6%B3%95%E5%99%A8.html"},{"title":"咖啡","uri":"http://unclefish.ink/my_blog.github.io/tags/%E5%92%96%E5%95%A1.html"},{"title":"影评","uri":"http://unclefish.ink/my_blog.github.io/tags/%E5%BD%B1%E8%AF%84.html"},{"title":"留学","uri":"http://unclefish.ink/my_blog.github.io/tags/%E7%95%99%E5%AD%A6.html"}]}